import {Plugin, PluginConfig} from "../plugin";
import {ObsidianClient} from "../../obsidian/client";
import {AnkiClient} from "../../anki/client";
import {MonorepoClient} from "../../noobgam/monorepo_client";
import {AllPluginNames, OBSIDIAN_DIARY_PLUGIN_NAME} from "../registry";
import {getGlobalLog} from "../../config";

const getLog = () => getGlobalLog({
    name: "diary-plugin"
})

export type ObsidianDiaryPluginConfig = {
    languageDiariesPrefix: string;
    unprocessedTag: string;
    processedTag: string;
}

export class ObsidianDiaryPlugin extends Plugin {

    ankiClient: AnkiClient
    obsidianClient: ObsidianClient
    monorepoClient: MonorepoClient;
    obsidianConfig: ObsidianDiaryPluginConfig;

    constructor(config: PluginConfig, ankiClient: AnkiClient, obsidianClient: ObsidianClient, monorepoClient: MonorepoClient, obsidianConfig: ObsidianDiaryPluginConfig) {
        super(config);
        this.ankiClient = ankiClient;
        this.obsidianClient = obsidianClient;
        this.monorepoClient = monorepoClient;
        this.obsidianConfig = obsidianConfig;
    }

    private async collectFiles(prefix: string): Promise<string[]> {
        const res = await this.obsidianClient.searchFilesByText(this.obsidianConfig.unprocessedTag);
        return res.filter(x => x.startsWith(prefix))
    }

    getName(): AllPluginNames {
        return OBSIDIAN_DIARY_PLUGIN_NAME;
    }


    async readyCheck(): Promise<boolean> {
        const ankiUp = await this.ankiClient.ankiIsUp();
        const obsidianUp = (await this.obsidianClient.getFile("Random/PetProjects.md")) !== "";
        return ankiUp && obsidianUp;
    }

    async processFile(fileName: string): Promise<void> {
        const fileContent = await this.obsidianClient.getFile(fileName);
        const language =
            fileName.indexOf('Deutsch') !== -1
                ? 'German'
                : fileName.indexOf('Japanese') !== -1
                    ? 'Japanese'
                    : undefined;
        if (!language) {
            return;
        }
        const cards = await this.monorepoClient.convertDiaryToCards(
            fileContent,
            language
        );
        let tags = ["autogenerated"]

        tags = [...tags, `language_${language.toLowerCase()}`]
        const parts = fileName.split('/');

        const deckName = `Noobgam::Diary::${language}::${parts[parts.length - 1]}`;
        await this.ankiClient.createDeck(deckName)
        const notes = cards.map(card => {
            return {
                deckName,
                modelName: `Autogenerated_Core_${language}`,
                fields: card,
                tags
            }
        });
        if (!await this.ankiClient.addNotes(notes)) {
            for (const note of notes) {
                await this.ankiClient.addNotes([note])
            }
        }
        getLog().info(cards);

        fileContent.replaceAll(this.obsidianConfig.unprocessedTag, this.obsidianConfig.processedTag);
        await this.obsidianClient.putFile(
            fileName,
            fileContent.replaceAll(this.obsidianConfig.unprocessedTag, this.obsidianConfig.processedTag)
        )
    }

    async executePluginCron(): Promise<void> {
        const listOfFiles = await this.collectFiles(this.obsidianConfig.languageDiariesPrefix);
        getLog().info(`Detected unprocessed files: ${listOfFiles}`);
        for (const fileName of listOfFiles) {
            // this could be parallel, but I don't want to do it right now
            await this.processFile(fileName);
        }

    }

    getExecutionDelayMs(): number {
        return 5000;
    }
}
